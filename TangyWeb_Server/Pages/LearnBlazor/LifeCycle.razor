@page "/learnBlazor/lifeCycle"
@using System.Threading

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />

@Count <button @onclick="StartCountDown">Start Countdown</button>

<div class="border">
  <_LifeCycleChild CountValue="@currentCount"></_LifeCycleChild>
</div>

<hr />
@foreach (var item in EventTypes)
{
  @item
  <hr />
}

@code {
  private int currentCount = 0;

  List<string> EventTypes = new List<string>();

  private int Count { get; set; } = 5;

  private void IncrementCount()
  {
    currentCount++;
  }

  protected override void OnInitialized()
  {
    EventTypes.Add("OnInitialized is callded");
  }

  protected override async Task OnInitializedAsync()
  {
    EventTypes.Add("OnInitializedAsync is callded");
    await Task.Delay(1000);
  }

  protected override void OnParametersSet()
  {
    EventTypes.Add("OnParameterSet is callded");
  }

  protected override async Task OnParametersSetAsync()
  {
    EventTypes.Add("OnParameterSetAsync is callded");
    await Task.Delay(1000);
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      currentCount = 111;
    }
    else
    {
      currentCount = 999;
    }
    EventTypes.Add("OnAfterRender is callded");
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    EventTypes.Add("OnAfterRenderAsync is callded");
    await Task.Delay(1000);
  }

  protected override bool ShouldRender()
  {
    EventTypes.Add("ShouldRender is callded");
    return true;
  }

  void StartCountDown()
  {
    var timer = new Timer(TimeCallback, null, 1000, 1000);
  }

  void TimeCallback(object state)
  {
    if (Count > 0)
    {
      Count--;
      InvokeAsync(StateHasChanged);
    }
  }

}