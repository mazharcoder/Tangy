@page "/category/create"
@page "/category/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
  <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

  <div class="col-12">
    @if (IsLoading)
    {
      <div class="text-center">
        <img src="/images/loading.gif" />
      </div>
    }
    else
    {
      <EditForm Model="Category" OnValidSubmit="UpsertCategory">
        <DataAnnotationsValidator />
        <div class="form-group">
          <label>Name</label>
          <InputText @bind-Value="Category.Name" class="form-control" />
          <ValidationMessage For="() => Category.Name"></ValidationMessage>
        </div>
        <div class="form-group py-2">
          <button class="btn btn-primary">@Title</button>
          <NavLink href="category" class="btn btn-secondary">Back To List</NavLink>
        </div>
      </EditForm>
    }
  </div>
</div>

@code {
  [Parameter]
  public int Id { get; set; }

  private CategoryDto Category { get; set; } = new();
  private string Title { get; set; } = "Create";
  private bool IsLoading { get; set; } = true;

  protected override async Task OnInitializedAsync()
  {
    // instead of making load categories function async and have it await here
    // this will result in application to hold and wait for data
    // instead we called Task.Run and provided the load categories function
    // this will load the page but will load the categories behind the scenes
    // and whenever the data is available it will show in the page
    if (Id == 0)
    {
      IsLoading = false;
    }
    else
    {
      Title = "Update";
      await Task.Run(LoadCategory);
    }
  }

  // separate function for getting load categories
  // this is not by default async and await
  // as this will be added to backgroun operation
  private void LoadCategory()
  {
    Category = _categoryRepository.GetById(Id);
    IsLoading = false;
  }

  private void UpsertCategory()
  {
    if (Category.Id == 0)
    {
      _categoryRepository.Create(Category);
    }
    else
    {
      _categoryRepository.Update(Category);
    }

    _navigationManager.NavigateTo("category");
  }
}
